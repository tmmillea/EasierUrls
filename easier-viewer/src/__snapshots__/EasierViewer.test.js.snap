// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Initialized 1`] = `
<EasierViewer>
  <div
    className="makeStyles-root-143"
  >
    <WithStyles(ForwardRef(Paper))
      className="makeStyles-paper-145"
    >
      <ForwardRef(Paper)
        className="makeStyles-paper-145"
        classes={
          Object {
            "elevation0": "MuiPaper-elevation0",
            "elevation1": "MuiPaper-elevation1",
            "elevation10": "MuiPaper-elevation10",
            "elevation11": "MuiPaper-elevation11",
            "elevation12": "MuiPaper-elevation12",
            "elevation13": "MuiPaper-elevation13",
            "elevation14": "MuiPaper-elevation14",
            "elevation15": "MuiPaper-elevation15",
            "elevation16": "MuiPaper-elevation16",
            "elevation17": "MuiPaper-elevation17",
            "elevation18": "MuiPaper-elevation18",
            "elevation19": "MuiPaper-elevation19",
            "elevation2": "MuiPaper-elevation2",
            "elevation20": "MuiPaper-elevation20",
            "elevation21": "MuiPaper-elevation21",
            "elevation22": "MuiPaper-elevation22",
            "elevation23": "MuiPaper-elevation23",
            "elevation24": "MuiPaper-elevation24",
            "elevation3": "MuiPaper-elevation3",
            "elevation4": "MuiPaper-elevation4",
            "elevation5": "MuiPaper-elevation5",
            "elevation6": "MuiPaper-elevation6",
            "elevation7": "MuiPaper-elevation7",
            "elevation8": "MuiPaper-elevation8",
            "elevation9": "MuiPaper-elevation9",
            "outlined": "MuiPaper-outlined",
            "root": "MuiPaper-root",
            "rounded": "MuiPaper-rounded",
          }
        }
      >
        <div
          className="MuiPaper-root makeStyles-paper-145 MuiPaper-elevation1 MuiPaper-rounded"
        >
          <UrlInput
            classes={
              Object {
                "field": "makeStyles-field-144",
                "paper": "makeStyles-paper-145",
                "root": "makeStyles-root-143",
              }
            }
            error={false}
            setUrl={[Function]}
            submit={[Function]}
            url=""
          >
            <div
              className="makeStyles-root-143"
            >
              <WithStyles(ForwardRef(TextField))
                className="makeStyles-field-144"
                error={false}
                id="urlInput"
                label="Url Input"
                onChange={[Function]}
                value=""
              >
                <ForwardRef(TextField)
                  className="makeStyles-field-144"
                  classes={
                    Object {
                      "root": "MuiTextField-root",
                    }
                  }
                  error={false}
                  id="urlInput"
                  label="Url Input"
                  onChange={[Function]}
                  value=""
                >
                  <WithStyles(ForwardRef(FormControl))
                    className="MuiTextField-root makeStyles-field-144"
                    color="primary"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    required={false}
                    variant="standard"
                  >
                    <ForwardRef(FormControl)
                      className="MuiTextField-root makeStyles-field-144"
                      classes={
                        Object {
                          "fullWidth": "MuiFormControl-fullWidth",
                          "marginDense": "MuiFormControl-marginDense",
                          "marginNormal": "MuiFormControl-marginNormal",
                          "root": "MuiFormControl-root",
                        }
                      }
                      color="primary"
                      disabled={false}
                      error={false}
                      fullWidth={false}
                      required={false}
                      variant="standard"
                    >
                      <div
                        className="MuiFormControl-root MuiTextField-root makeStyles-field-144"
                      >
                        <WithStyles(ForwardRef(InputLabel))
                          htmlFor="urlInput"
                          id="urlInput-label"
                        >
                          <ForwardRef(InputLabel)
                            classes={
                              Object {
                                "animated": "MuiInputLabel-animated",
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "filled": "MuiInputLabel-filled",
                                "focused": "Mui-focused",
                                "formControl": "MuiInputLabel-formControl",
                                "marginDense": "MuiInputLabel-marginDense",
                                "outlined": "MuiInputLabel-outlined",
                                "required": "Mui-required",
                                "root": "MuiInputLabel-root",
                                "shrink": "MuiInputLabel-shrink",
                              }
                            }
                            htmlFor="urlInput"
                            id="urlInput-label"
                          >
                            <WithStyles(ForwardRef(FormLabel))
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                              classes={
                                Object {
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "required": "Mui-required",
                                }
                              }
                              data-shrink={false}
                              htmlFor="urlInput"
                              id="urlInput-label"
                            >
                              <ForwardRef(FormLabel)
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                    "colorSecondary": "MuiFormLabel-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "filled": "MuiFormLabel-filled",
                                    "focused": "Mui-focused Mui-focused",
                                    "required": "Mui-required Mui-required",
                                    "root": "MuiFormLabel-root",
                                  }
                                }
                                data-shrink={false}
                                htmlFor="urlInput"
                                id="urlInput-label"
                              >
                                <label
                                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                  data-shrink={false}
                                  htmlFor="urlInput"
                                  id="urlInput-label"
                                >
                                  Url Input
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Input))
                          autoFocus={false}
                          fullWidth={false}
                          id="urlInput"
                          multiline={false}
                          onChange={[Function]}
                          value=""
                        >
                          <ForwardRef(Input)
                            autoFocus={false}
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root",
                                "underline": "MuiInput-underline",
                              }
                            }
                            fullWidth={false}
                            id="urlInput"
                            multiline={false}
                            onChange={[Function]}
                            value=""
                          >
                            <WithStyles(ForwardRef(InputBase))
                              autoFocus={false}
                              classes={
                                Object {
                                  "colorSecondary": "MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInput-formControl",
                                  "fullWidth": "MuiInput-fullWidth",
                                  "input": "MuiInput-input",
                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInput-marginDense",
                                  "multiline": "MuiInput-multiline",
                                  "root": "MuiInput-root MuiInput-underline",
                                  "underline": null,
                                }
                              }
                              fullWidth={false}
                              id="urlInput"
                              inputComponent="input"
                              multiline={false}
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <ForwardRef(InputBase)
                                autoFocus={false}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "focused": "Mui-focused Mui-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                id="urlInput"
                                inputComponent="input"
                                multiline={false}
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-invalid={false}
                                    autoFocus={false}
                                    className="MuiInputBase-input MuiInput-input"
                                    disabled={false}
                                    id="urlInput"
                                    onAnimationStart={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <WithStyles(ForwardRef(Button))
                color="primary"
                onClick={[Function]}
                variant="contained"
              >
                <ForwardRef(Button)
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="primary"
                  onClick={[Function]}
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Create Url
                        </span>
                        <NoSsr>
                          <WithStyles(undefined)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(undefined)>
                        </NoSsr>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </div>
          </UrlInput>
          <WithStyles(ForwardRef(TableContainer))>
            <ForwardRef(TableContainer)
              classes={
                Object {
                  "root": "MuiTableContainer-root",
                }
              }
            >
              <div
                className="MuiTableContainer-root"
              >
                <WithStyles(ForwardRef(Table))>
                  <ForwardRef(Table)
                    classes={
                      Object {
                        "root": "MuiTable-root",
                        "stickyHeader": "MuiTable-stickyHeader",
                      }
                    }
                  >
                    <table
                      className="MuiTable-root"
                    >
                      <WithStyles(ForwardRef(TableHead))>
                        <ForwardRef(TableHead)
                          classes={
                            Object {
                              "root": "MuiTableHead-root",
                            }
                          }
                        >
                          <thead
                            className="MuiTableHead-root"
                          >
                            <WithStyles(ForwardRef(TableRow))>
                              <ForwardRef(TableRow)
                                classes={
                                  Object {
                                    "footer": "MuiTableRow-footer",
                                    "head": "MuiTableRow-head",
                                    "hover": "MuiTableRow-hover",
                                    "root": "MuiTableRow-root",
                                    "selected": "Mui-selected",
                                  }
                                }
                              >
                                <tr
                                  className="MuiTableRow-root MuiTableRow-head"
                                >
                                  <WithStyles(ForwardRef(TableCell))>
                                    <ForwardRef(TableCell)
                                      classes={
                                        Object {
                                          "alignCenter": "MuiTableCell-alignCenter",
                                          "alignJustify": "MuiTableCell-alignJustify",
                                          "alignLeft": "MuiTableCell-alignLeft",
                                          "alignRight": "MuiTableCell-alignRight",
                                          "body": "MuiTableCell-body",
                                          "footer": "MuiTableCell-footer",
                                          "head": "MuiTableCell-head",
                                          "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                          "paddingNone": "MuiTableCell-paddingNone",
                                          "root": "MuiTableCell-root",
                                          "sizeSmall": "MuiTableCell-sizeSmall",
                                          "stickyHeader": "MuiTableCell-stickyHeader",
                                        }
                                      }
                                    >
                                      <th
                                        aria-sort={null}
                                        className="MuiTableCell-root MuiTableCell-head"
                                        scope="col"
                                      >
                                        Easier Url Link
                                      </th>
                                    </ForwardRef(TableCell)>
                                  </WithStyles(ForwardRef(TableCell))>
                                  <WithStyles(ForwardRef(TableCell))>
                                    <ForwardRef(TableCell)
                                      classes={
                                        Object {
                                          "alignCenter": "MuiTableCell-alignCenter",
                                          "alignJustify": "MuiTableCell-alignJustify",
                                          "alignLeft": "MuiTableCell-alignLeft",
                                          "alignRight": "MuiTableCell-alignRight",
                                          "body": "MuiTableCell-body",
                                          "footer": "MuiTableCell-footer",
                                          "head": "MuiTableCell-head",
                                          "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                                          "paddingNone": "MuiTableCell-paddingNone",
                                          "root": "MuiTableCell-root",
                                          "sizeSmall": "MuiTableCell-sizeSmall",
                                          "stickyHeader": "MuiTableCell-stickyHeader",
                                        }
                                      }
                                    >
                                      <th
                                        aria-sort={null}
                                        className="MuiTableCell-root MuiTableCell-head"
                                        scope="col"
                                      >
                                        Destination
                                      </th>
                                    </ForwardRef(TableCell)>
                                  </WithStyles(ForwardRef(TableCell))>
                                </tr>
                              </ForwardRef(TableRow)>
                            </WithStyles(ForwardRef(TableRow))>
                          </thead>
                        </ForwardRef(TableHead)>
                      </WithStyles(ForwardRef(TableHead))>
                      <WithStyles(ForwardRef(TableBody))>
                        <ForwardRef(TableBody)
                          classes={
                            Object {
                              "root": "MuiTableBody-root",
                            }
                          }
                        >
                          <tbody
                            className="MuiTableBody-root"
                          />
                        </ForwardRef(TableBody)>
                      </WithStyles(ForwardRef(TableBody))>
                    </table>
                  </ForwardRef(Table)>
                </WithStyles(ForwardRef(Table))>
              </div>
            </ForwardRef(TableContainer)>
          </WithStyles(ForwardRef(TableContainer))>
        </div>
      </ForwardRef(Paper)>
    </WithStyles(ForwardRef(Paper))>
  </div>
</EasierViewer>
`;

exports[`empty snapshot 1`] = `
<div
  className="makeStyles-root-1"
>
  <div
    className="MuiPaper-root makeStyles-paper-3 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="makeStyles-root-1"
    >
      <div
        className="MuiFormControl-root MuiTextField-root makeStyles-field-2"
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
          data-shrink={false}
          htmlFor="urlInput"
          id="urlInput-label"
        >
          Url Input
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            id="urlInput"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value=""
          />
        </div>
      </div>
      <button
        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={0}
        type="button"
      >
        <span
          className="MuiButton-label"
        >
          Create Url
        </span>
      </button>
    </div>
    <div
      className="MuiTableContainer-root"
    >
      <table
        className="MuiTable-root"
      >
        <thead
          className="MuiTableHead-root"
        >
          <tr
            className="MuiTableRow-root MuiTableRow-head"
          >
            <th
              aria-sort={null}
              className="MuiTableCell-root MuiTableCell-head"
              scope="col"
            >
              Easier Url Link
            </th>
            <th
              aria-sort={null}
              className="MuiTableCell-root MuiTableCell-head"
              scope="col"
            >
              Destination
            </th>
          </tr>
        </thead>
        <tbody
          className="MuiTableBody-root"
        />
      </table>
    </div>
  </div>
</div>
`;
